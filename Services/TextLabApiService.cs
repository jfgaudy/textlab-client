#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using TextLabClient.Models;

namespace TextLabClient.Services
{
    public class TextLabApiService
    {
        private static readonly HttpClient _httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(120) };
        private string _baseUrl = "https://textlab-api.onrender.com";
        private readonly LLMCenterAuthService _authService;

        public bool IsConnected { get; private set; }

        public TextLabApiService(LLMCenterAuthService authService)
        {
            _authService = authService;
        }

        public void SetBaseUrl(string baseUrl)
        {
            _baseUrl = baseUrl.TrimEnd('/');
            // üß™ TEST: Commenter pour voir si √ßa r√©sout le probl√®me d'acc√®s apr√®s Connecter
            // IsConnected = false;
        }

        /// <summary>
        /// Cr√©e une requ√™te HTTP avec les headers d'authentification requis
        /// </summary>
        private async Task<HttpRequestMessage> CreateAuthenticatedRequestAsync(HttpMethod method, string endpoint)
        {
            var request = new HttpRequestMessage(method, $"{_baseUrl}{endpoint}");
            
            if (!_authService.IsAuthenticated())
            {
                throw new UnauthorizedAccessException("Utilisateur non authentifi√©");
            }

            var token = await _authService.GetBearerTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                throw new UnauthorizedAccessException("Token d'authentification manquant");
            }

            request.Headers.Add("X-User-Token", token);
            await LoggingService.LogInfoAsync($"üîê Requ√™te authentifi√©e cr√©√©e vers: {_baseUrl}{endpoint}");
            return request;
        }

        /// <summary>
        /// Envoie une requ√™te authentifi√©e avec gestion des erreurs
        /// </summary>
        private async Task<HttpResponseMessage> SendAuthenticatedRequestAsync(HttpRequestMessage request)
        {
            var response = await _httpClient.SendAsync(request);
            
            // Si 401, essayer de rafra√Æchir le token et r√©essayer
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await LoggingService.LogWarningAsync("üîÑ Token expir√©, tentative de refresh...");
                
                if (await _authService.RefreshTokenIfNeededAsync())
                {
                    // Recr√©er la requ√™te avec le nouveau token
                    var newRequest = await CreateAuthenticatedRequestAsync(request.Method, request.RequestUri?.PathAndQuery ?? "");
                    if (request.Content != null)
                    {
                        newRequest.Content = request.Content;
                    }
                    
                    response = await _httpClient.SendAsync(newRequest);
                    await LoggingService.LogInfoAsync("‚úÖ Requ√™te retent√©e avec nouveau token");
                }
                else
                {
                    await LoggingService.LogErrorAsync("‚ùå Impossible de rafra√Æchir le token");
                }
            }
            
            return response;
        }

        /// <summary>
        /// Helper pour requ√™tes GET authentifi√©es
        /// </summary>
        private async Task<T?> GetAuthenticatedAsync<T>(string endpoint)
        {
            try
            {
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, endpoint);
                var response = await SendAuthenticatedRequestAsync(request);
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    return JsonConvert.DeserializeObject<T>(content);
                }
                
                return default(T);
            }
            catch (Exception ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur lors de l'envoi de la requ√™te: {ex.Message}");
                return default(T);
            }
        }

        public async Task<HealthInfo?> TestConnectionAsync()
        {
            try
            {
                await LoggingService.LogDebugAsync($"üîç Test de connexion vers: {_baseUrl}");

                // Essayer plusieurs endpoints pour d√©terminer l'√©tat de sant√©
                var endpoints = new[] { "/health", "/admin/status", "/api/v1/documents/diagnostics" };
                
                foreach (var endpoint in endpoints)
                {
                    try
                    {
                        await LoggingService.LogDebugAsync($"üîç Tentative: {endpoint}");
                        
                        var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, endpoint);
                        var response = await SendAuthenticatedRequestAsync(request);
                        
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            await LoggingService.LogDebugAsync($"üîç {endpoint} ‚Üí {response.StatusCode}");
                            await LoggingService.LogDebugAsync($"üîç Contenu: {content.Substring(0, Math.Min(200, content.Length))}...");

                            // Essayer de parser comme HealthInfo
                            try
                            {
                                var healthInfo = JsonConvert.DeserializeObject<HealthInfo>(content);
                                if (healthInfo != null)
                                {
                                    IsConnected = true;
                                    await LoggingService.LogDebugAsync($"‚úÖ Connexion r√©ussie via {endpoint}");
                                    return healthInfo;
                                }
                            }
                            catch
                            {
                                // Si ce n'est pas un JSON HealthInfo valide, cr√©er un HealthInfo basique
                                if (response.IsSuccessStatusCode)
                                {
                                    IsConnected = true;
                                    await LoggingService.LogDebugAsync($"‚úÖ Serveur r√©pond via {endpoint}, cr√©ation HealthInfo basique");
                                    return new HealthInfo
                                    {
                                        Status = "initializing",
                                        Version = "",
                                        Environment = ""
                                    };
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        await LoggingService.LogDebugAsync($"‚ùå {endpoint} ‚Üí Exception: {ex.Message}");
                        continue;
                    }
                }

                IsConnected = false;
                await LoggingService.LogErrorAsync($"‚ùå Aucun endpoint de health accessible sur {_baseUrl}");
                return null;
            }
            catch (Exception ex)
            {
                IsConnected = false;
                await LoggingService.LogErrorAsync($"‚ùå Erreur g√©n√©rale de connexion: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Teste les nouveaux endpoints d'initialisation et diagnostics pour r√©soudre les probl√®mes Git Service
        /// </summary>
        public async Task<(bool Success, string Message)> TestInitializationEndpointsAsync()
        {
            var results = new StringBuilder();
            bool hasErrors = false;

            try
            {
                // Test 1: Diagnostics d√©taill√©s
                results.AppendLine("üîç Test des endpoints d'initialisation:");
                
                try
                {
                    var diagnosticsResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/diagnostics");
                    if (diagnosticsResponse.IsSuccessStatusCode)
                    {
                        var diagnostics = await diagnosticsResponse.Content.ReadAsStringAsync();
                        results.AppendLine("‚úÖ Diagnostics: OK");
                        
                        // V√©rifier si le probl√®me Git Service est pr√©sent
                        if (diagnostics.Contains("git_service") || diagnostics.Contains("ServiceInitializer"))
                        {
                            results.AppendLine("‚ö†Ô∏è Information Git Service d√©tect√©e dans diagnostics");
                        }
                    }
                    else
                    {
                        results.AppendLine($"‚ùå Diagnostics: {diagnosticsResponse.StatusCode}");
                        hasErrors = true;
                    }
                }
                catch (Exception ex)
                {
                    results.AppendLine($"‚ùå Diagnostics: Exception - {ex.Message}");
                    hasErrors = true;
                }

                // Test 2: Stats environment (nouveau endpoint mentionn√© dans les logs)
                try
                {
                    var statsResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/stats/environment");
                    if (statsResponse.IsSuccessStatusCode)
                    {
                        results.AppendLine("‚úÖ Stats Environment: OK");
                    }
                    else
                    {
                        results.AppendLine($"‚ùå Stats Environment: {statsResponse.StatusCode}");
                        hasErrors = true;
                    }
                }
                catch (Exception ex)
                {
                    results.AppendLine($"‚ùå Stats Environment: Exception - {ex.Message}");
                    hasErrors = true;
                }

                // Test 3: Admin Status (celui qui cause l'erreur Git Service)
                try
                {
                    var adminStatusResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/admin/status");
                    if (adminStatusResponse.IsSuccessStatusCode)
                    {
                        results.AppendLine("‚úÖ Admin Status: OK");
                    }
                    else
                    {
                        var errorContent = await adminStatusResponse.Content.ReadAsStringAsync();
                        results.AppendLine($"‚ùå Admin Status: {adminStatusResponse.StatusCode}");
                        
                        // V√©rifier si c'est l'erreur Git Service sp√©cifique
                        if (errorContent.Contains("get_git_service"))
                        {
                            results.AppendLine("üîß Erreur Git Service d√©tect√©e - probl√®me c√¥t√© serveur");
                            results.AppendLine("   ‚Üí ServiceInitializer.get_git_service() manquant");
                        }
                        hasErrors = true;
                    }
                }
                catch (Exception ex)
                {
                    results.AppendLine($"‚ùå Admin Status: Exception - {ex.Message}");
                    hasErrors = true;
                }

                // Test 4: Health endpoint avec param√®tres (vu dans les logs avec erreur 422)
                try
                {
                    var healthDetailedResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/health");
                    if (healthDetailedResponse.IsSuccessStatusCode)
                    {
                        results.AppendLine("‚úÖ Documents Health: OK");
                    }
                    else
                    {
                        results.AppendLine($"‚ö†Ô∏è Documents Health: {healthDetailedResponse.StatusCode} (attendu selon logs)");
                        // 422 est attendu selon les logs, donc pas d'erreur
                    }
                }
                catch (Exception ex)
                {
                    results.AppendLine($"‚ùå Documents Health: Exception - {ex.Message}");
                }

                return (!hasErrors, results.ToString());
            }
            catch (Exception ex)
            {
                return (false, $"‚ùå Erreur g√©n√©rale lors du test: {ex.Message}");
            }
        }

        public async Task<List<Repository>?> GetRepositoriesAsync()
        {
            try
            {
                return await GetAuthenticatedAsync<List<Repository>>("/api/v1/repositories");
            }
            catch (Exception ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Exception GetRepositoriesAsync: {ex.Message}");
                return null;
            }
        }

        // ===== LECTURE DES DOCUMENTS =====

        public async Task<List<Document>> GetDocumentsAsync(string? repositoryId = null)
        {
            try
            {
                // üîê UTILISER L'AUTHENTIFICATION COMME POUR LES REPOSITORIES
                var endpoint = "/api/v1/documents";
                if (!string.IsNullOrEmpty(repositoryId))
                {
                    endpoint += $"?repository_id={repositoryId}";
                }

                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, endpoint);
                var response = await SendAuthenticatedRequestAsync(request);
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç GetDocuments Response: {content}");

                var apiResponse = JsonConvert.DeserializeObject<ApiResponse<DocumentListResponse>>(content);
                if (apiResponse?.IsSuccess == true && apiResponse.Data?.Documents != null)
                {
                    return apiResponse.Data.Documents;
                }

                // Essayer la structure directe
                var directResponse = JsonConvert.DeserializeObject<DocumentListResponse>(content);
                if (directResponse?.Documents != null)
                {
                    return directResponse.Documents;
                }

                return new List<Document>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentsAsync: {ex.Message}");
                throw;
            }
        }

        public async Task<Document?> GetDocumentAsync(string documentId)
        {
            try
            {
                // üîê UTILISER L'AUTHENTIFICATION POUR ACC√âDER AU CONTENU DU DOCUMENT
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}");
                var response = await SendAuthenticatedRequestAsync(request);
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç GetDocument Response: {content}");

                // Essayer d'abord avec ApiResponse wrapper
                try
                {
                    var apiResponse = JsonConvert.DeserializeObject<ApiResponse<Document>>(content);
                    if (apiResponse?.IsSuccess == true && apiResponse.Data != null)
                    {
                        return apiResponse.Data;
                    }
                }
                catch
                {
                    // Si √ßa √©choue, essayer directement
                }

                // Essayer la d√©s√©rialisation directe
                return JsonConvert.DeserializeObject<Document>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentAsync: {ex.Message}");
                return null;
            }
        }

        // SUPPRIM√â: UpdateDocumentAsync - Endpoint non disponible dans l'API

        public async Task<Document?> CreateDocumentAsync(string title, string content, string repositoryId, string? category = null, string? visibility = "private", string? createdBy = null)
        {
            try
            {
                var document = new
                {
                    title = title,
                    content = content,
                    repository_id = repositoryId,
                    category = category,
                    visibility = visibility ?? "private",
                    created_by = createdBy
                };

                var json = JsonConvert.SerializeObject(document);
                var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

                // üîê CORRECTION: Utiliser la requ√™te authentifi√©e
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Post, "/api/v1/documents/");
                request.Content = httpContent;
                
                var response = await SendAuthenticatedRequestAsync(request);
                
                System.Diagnostics.Debug.WriteLine($"üöÄ CreateDocument - URL: {_baseUrl}/api/v1/documents/");
                System.Diagnostics.Debug.WriteLine($"üöÄ CreateDocument - Status: {response.StatusCode}");
                
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üöÄ CreateDocument - Response: {responseContent}");

                if (response.IsSuccessStatusCode)
                {
                    // Essayer d'abord avec ApiResponse wrapper
                    try
                    {
                        var apiResponse = JsonConvert.DeserializeObject<ApiResponse<Document>>(responseContent);
                        if (apiResponse?.IsSuccess == true && apiResponse.Data != null)
                        {
                            return apiResponse.Data;
                        }
                    }
                    catch
                    {
                        // Si √ßa √©choue, essayer directement
                    }

                    // Essayer la d√©s√©rialisation directe
                    return JsonConvert.DeserializeObject<Document>(responseContent);
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur HTTP {response.StatusCode}: {responseContent}");
                    throw new HttpRequestException($"Erreur lors de la cr√©ation du document: {response.StatusCode} - {responseContent}");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur CreateDocumentAsync: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Met √† jour un document existant avec cr√©ation automatique d'une nouvelle version Git
        /// </summary>
        public async Task<Document?> UpdateDocumentAsync(string documentId, string author, string? title = null, string? content = null, string? category = null, string? visibility = null)
        {
            try
            {
                var updateData = new Dictionary<string, object?>();
                
                // Ajouter seulement les champs modifi√©s
                if (!string.IsNullOrEmpty(title))
                    updateData["title"] = title;
                if (!string.IsNullOrEmpty(content))
                    updateData["content"] = content;
                if (!string.IsNullOrEmpty(category))
                    updateData["category"] = category;
                if (!string.IsNullOrEmpty(visibility))
                    updateData["visibility"] = visibility;

                var json = JsonConvert.SerializeObject(updateData);
                var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

                System.Diagnostics.Debug.WriteLine($"üîÑ UpdateDocument - ID: {documentId}, Auteur: {author}");
                System.Diagnostics.Debug.WriteLine($"üîÑ UpdateDocument - Donn√©es: {json}");

                // üîê CORRECTION: Utiliser l'authentification pour modifier les documents
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Put, $"/api/v1/documents/{documentId}?author={Uri.EscapeDataString(author)}");
                request.Content = httpContent;
                var response = await SendAuthenticatedRequestAsync(request);
                
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîÑ UpdateDocument - Status: {response.StatusCode}");
                System.Diagnostics.Debug.WriteLine($"üîÑ UpdateDocument - Response: {responseContent}");

                if (response.IsSuccessStatusCode)
                {
                    var updatedDocument = JsonConvert.DeserializeObject<Document>(responseContent);
                    if (updatedDocument != null)
                    {
                        System.Diagnostics.Debug.WriteLine($"‚úÖ Document mis √† jour: {updatedDocument.Title}, Nouveau commit: {updatedDocument.CurrentCommitSha}");
                    }
                    return updatedDocument;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur mise √† jour document: {response.StatusCode} - {responseContent}");
                    throw new HttpRequestException($"Erreur lors de la mise √† jour du document: {response.StatusCode} - {responseContent}");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Exception UpdateDocumentAsync: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Supprime un document (suppression logique)
        /// </summary>
        public async Task<bool> DeleteDocumentAsync(string documentId)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"üóëÔ∏è DeleteDocument - ID: {documentId}");

                // üîê CORRECTION: Utiliser l'authentification pour supprimer les documents
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Delete, $"/api/v1/documents/{documentId}");
                var response = await SendAuthenticatedRequestAsync(request);
                
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üóëÔ∏è DeleteDocument - Status: {response.StatusCode}");
                System.Diagnostics.Debug.WriteLine($"üóëÔ∏è DeleteDocument - Response: {responseContent}");

                if (response.IsSuccessStatusCode)
                {
                    System.Diagnostics.Debug.WriteLine($"‚úÖ Document supprim√© (logique): {documentId}");
                    return true;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur suppression document: {response.StatusCode} - {responseContent}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Exception DeleteDocumentAsync: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Compare deux versions d'un document
        /// </summary>
        public async Task<object?> CompareDocumentVersionsAsync(string documentId, string version1, string version2)
        {
            try
            {
                var compareRequest = new
                {
                    version1 = version1,
                    version2 = version2
                };

                var json = JsonConvert.SerializeObject(compareRequest);
                var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

                System.Diagnostics.Debug.WriteLine($"üîç CompareVersions - ID: {documentId}, v1: {version1}, v2: {version2}");

                // üîê UTILISER L'AUTHENTIFICATION POUR COMPARER LES VERSIONS
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Post, $"/api/v1/documents/{documentId}/versions/compare");
                request.Content = httpContent;
                var response = await SendAuthenticatedRequestAsync(request);
                
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç CompareVersions - Status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    return JsonConvert.DeserializeObject<object>(responseContent);
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur comparaison versions: {response.StatusCode} - {responseContent}");
                    return null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Exception CompareDocumentVersionsAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Restaure une version ant√©rieure d'un document
        /// </summary>
        public async Task<object?> RestoreDocumentVersionAsync(string documentId, string version, string author, string? reason = null)
        {
            try
            {
                var restoreRequest = new
                {
                    version = version,
                    author = author,
                    reason = reason ?? $"Restauration de la version {version}"
                };

                var json = JsonConvert.SerializeObject(restoreRequest);
                var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

                System.Diagnostics.Debug.WriteLine($"‚èÆÔ∏è RestoreVersion - ID: {documentId}, Version: {version}, Auteur: {author}");

                // üîê CORRECTION: Utiliser l'authentification pour restaurer les versions
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Post, $"/api/v1/documents/{documentId}/versions/restore");
                request.Content = httpContent;
                var response = await SendAuthenticatedRequestAsync(request);
                
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"‚èÆÔ∏è RestoreVersion - Status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    System.Diagnostics.Debug.WriteLine($"‚úÖ Version restaur√©e: {documentId} vers {version}");
                    return JsonConvert.DeserializeObject<object>(responseContent);
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur restauration version: {response.StatusCode} - {responseContent}");
                    return null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Exception RestoreDocumentVersionAsync: {ex.Message}");
                return null;
            }
        }

        public async Task<Document?> GetDocumentWithContentAsync(string documentId, string? version = null)
        {
            try
            {
                var endpoint = $"/api/v1/documents/{documentId}/content";
                if (!string.IsNullOrEmpty(version))
                {
                    endpoint += $"?version={version}";
                }

                // üîê CORRECTION: Utiliser l'authentification
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, endpoint);
                var response = await SendAuthenticatedRequestAsync(request);
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<Document>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentWithContentAsync: {ex.Message}");
                return null;
            }
        }

        public async Task<string?> GetDocumentRawContentAsync(string documentId)
        {
            try
            {
                // üîê CORRECTION: Utiliser l'authentification
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}/raw");
                var response = await SendAuthenticatedRequestAsync(request);
                response.EnsureSuccessStatusCode();

                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentRawContentAsync: {ex.Message}");
                return null;
            }
        }

        public async Task<int> GetDocumentVersionsCountAsync(string documentId)
        {
            try
            {
                // üîê UTILISER L'AUTHENTIFICATION POUR ACC√âDER AU COMPTEUR DE VERSIONS
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}/versions");
                var response = await SendAuthenticatedRequestAsync(request);
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var versions = JsonConvert.DeserializeObject<DocumentVersions>(content);
                    return versions?.TotalVersions ?? 0;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentVersionsCountAsync: {ex.Message}");
                return 0;
            }
        }

        // ===== CONTENU DES DOCUMENTS =====

        public async Task<DocumentContent?> GetDocumentContentAsync(string documentId)
        {
            try
            {
                await LoggingService.LogDebugAsync($"üîç GetDocumentContent appel√© avec documentId: '{documentId}'");
                await LoggingService.LogDebugAsync($"üîç URL compl√®te: {_baseUrl}/api/v1/documents/{documentId}/content");
                
                // üîê CORRECTION: Utiliser l'authentification
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}/content");
                var response = await SendAuthenticatedRequestAsync(request);
                
                await LoggingService.LogDebugAsync($"üîç R√©ponse HTTP: {response.StatusCode} - {response.ReasonPhrase}");
                
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                await LoggingService.LogDebugAsync($"üîç GetDocumentContent Response: {content}");

                // L'API retourne directement le contenu, pas dans un wrapper
                var result = JsonConvert.DeserializeObject<DocumentContent>(content);
                return result;
            }
            catch (HttpRequestException ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur HTTP GetDocumentContent: {ex.Message}");
                return null;
            }
            catch (Exception ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur GetDocumentContent: {ex.Message}");
                return null;
            }
        }

        public async Task<DocumentContent?> GetDocumentContentVersionAsync(string documentId, string commitSha)
        {
            try
            {
                await LoggingService.LogDebugAsync($"üîç GetDocumentContentVersionAsync appel√© - DocumentId: '{documentId}', CommitSha: '{commitSha}'");
                
                // üîê CORRECTION: Utiliser l'authentification
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}/content?version={commitSha}");
                var response = await SendAuthenticatedRequestAsync(request);
                
                await LoggingService.LogDebugAsync($"üîç URL compl√®te: {_baseUrl}/api/v1/documents/{documentId}/content?version={commitSha}");
                await LoggingService.LogDebugAsync($"üîç R√©ponse HTTP: {response.StatusCode} - {response.ReasonPhrase}");
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await LoggingService.LogErrorAsync($"‚ùå Erreur HTTP {response.StatusCode}: {errorContent}");
                    return null;
                }

                var content = await response.Content.ReadAsStringAsync();
                await LoggingService.LogDebugAsync($"üîç GetDocumentContentVersion Response: {content.Substring(0, Math.Min(200, content.Length))}...");

                var result = JsonConvert.DeserializeObject<DocumentContent>(content);
                await LoggingService.LogDebugAsync($"‚úÖ D√©s√©rialisation r√©ussie - Content length: {result?.Content?.Length ?? 0}");
                return result;
            }
            catch (HttpRequestException ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur HTTP GetDocumentContentVersion: {ex.Message}");
                return null;
            }
            catch (Exception ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur GetDocumentContentVersion: {ex.Message}");
                return null;
            }
        }

        // ===== VERSIONING ET HISTORIQUE =====

        public async Task<DocumentVersions?> GetDocumentVersionsAsync(string documentId, int limit = 50)
        {
            try
            {
                await LoggingService.LogDebugAsync($"üîç GetDocumentVersions appel√© avec documentId: '{documentId}'");
                await LoggingService.LogDebugAsync($"üîç URL compl√®te: {_baseUrl}/api/v1/documents/{documentId}/versions?limit={limit}");
                
                // üîê UTILISER L'AUTHENTIFICATION POUR ACC√âDER AUX VERSIONS
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/documents/{documentId}/versions?limit={limit}");
                var response = await SendAuthenticatedRequestAsync(request);
                
                await LoggingService.LogDebugAsync($"üîç R√©ponse HTTP: {response.StatusCode} - {response.ReasonPhrase}");
                
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                await LoggingService.LogDebugAsync($"üîç GetDocumentVersions Response: {content}");

                // D√©s√©rialiser directement vers DocumentVersions
                var documentVersions = JsonConvert.DeserializeObject<DocumentVersions>(content);
                await LoggingService.LogDebugAsync($"‚úÖ D√©s√©rialisation r√©ussie: {documentVersions?.TotalVersions ?? 0} versions trouv√©es");
                
                return documentVersions;
            }
            catch (Exception ex)
            {
                await LoggingService.LogErrorAsync($"‚ùå Erreur GetDocumentVersionsAsync: {ex.Message}");
                return null;
            }
        }

        // ===== M√âTHODES DE DIAGNOSTIC ET SUPPORT =====

        public async Task<string> GetDiagnosticsAsync()
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/diagnostics");
                response.EnsureSuccessStatusCode();

                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                return $"Erreur diagnostic: {ex.Message}";
            }
        }



        // M√©thode de test pour diagnostiquer les probl√®mes d'endpoints
        public async Task<string> TestEndpointsAsync(string documentId)
        {
            var results = new StringBuilder();
            results.AppendLine($"üîç Test des endpoints pour le document: {documentId}");
            results.AppendLine();
            
            // Test endpoint /content
            try
            {
                var contentResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/{documentId}/content");
                results.AppendLine($"üìÑ GET /content ‚Üí {contentResponse.StatusCode} {contentResponse.ReasonPhrase}");
                if (!contentResponse.IsSuccessStatusCode)
                {
                    var errorContent = await contentResponse.Content.ReadAsStringAsync();
                    results.AppendLine($"   Erreur: {errorContent.Substring(0, Math.Min(100, errorContent.Length))}...");
                }
            }
            catch (Exception ex)
            {
                results.AppendLine($"‚ùå GET /content ‚Üí Exception: {ex.Message}");
            }
            
            // Test endpoint /versions
            try
            {
                var versionsResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/{documentId}/versions");
                results.AppendLine($"üìö GET /versions ‚Üí {versionsResponse.StatusCode} {versionsResponse.ReasonPhrase}");
                if (!versionsResponse.IsSuccessStatusCode)
                {
                    var errorContent = await versionsResponse.Content.ReadAsStringAsync();
                    results.AppendLine($"   Erreur: {errorContent.Substring(0, Math.Min(100, errorContent.Length))}...");
                }
            }
            catch (Exception ex)
            {
                results.AppendLine($"‚ùå GET /versions ‚Üí Exception: {ex.Message}");
            }
            
            // Test endpoint /raw
            try
            {
                var rawResponse = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/{documentId}/raw");
                results.AppendLine($"üìù GET /raw ‚Üí {rawResponse.StatusCode} {rawResponse.ReasonPhrase}");
                if (!rawResponse.IsSuccessStatusCode)
                {
                    var errorContent = await rawResponse.Content.ReadAsStringAsync();
                    results.AppendLine($"   Erreur: {errorContent.Substring(0, Math.Min(100, errorContent.Length))}...");
                }
            }
            catch (Exception ex)
            {
                results.AppendLine($"‚ùå GET /raw ‚Üí Exception: {ex.Message}");
            }
            
            return results.ToString();
        }

        // ===== NOUVEAUX ENDPOINTS API =====

        /// <summary>
        /// Utilise les nouveaux endpoints publics pour r√©cup√©rer les repositories
        /// </summary>
        public async Task<List<Repository>> GetPublicRepositoriesAsync()
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/repositories/");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç GetPublicRepositories Response: {content}");

                return JsonConvert.DeserializeObject<List<Repository>>(content) ?? new List<Repository>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetPublicRepositoriesAsync: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// R√©cup√®re les d√©tails d'un repository sp√©cifique via l'endpoint public
        /// </summary>
        public async Task<Repository?> GetRepositoryDetailsAsync(string repositoryId)
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/repositories/{repositoryId}");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç GetRepositoryDetails Response: {content}");

                return JsonConvert.DeserializeObject<Repository>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetRepositoryDetailsAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// R√©cup√®re le nombre de documents dans un repository
        /// </summary>
        public async Task<object?> GetRepositoryDocumentCountAsync(string repositoryId)
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/repositories/{repositoryId}/documents/count");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<object>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetRepositoryDocumentCountAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Supprime un document avec support d'archivage
        /// </summary>
        public async Task<object?> ArchiveDocumentAsync(string documentId, string author, string? reason = null)
        {
            try
            {
                var requestData = new
                {
                    soft_delete = true,
                    reason = reason
                };

                var json = JsonConvert.SerializeObject(requestData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await _httpClient.DeleteAsync($"{_baseUrl}/api/v1/documents/{documentId}/archive?author={Uri.EscapeDataString(author)}");
                response.EnsureSuccessStatusCode();

                var responseContent = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<object>(responseContent);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur ArchiveDocumentAsync: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Met √† jour un document via le nouvel endpoint PUT
        /// </summary>
        public async Task<object?> UpdateDocumentAsync(string documentId, string author, object updateData)
        {
            try
            {
                var json = JsonConvert.SerializeObject(updateData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await _httpClient.PutAsync($"{_baseUrl}/api/v1/documents/{documentId}?author={Uri.EscapeDataString(author)}", content);
                response.EnsureSuccessStatusCode();

                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"üîç UpdateDocument Response: {responseContent}");

                return JsonConvert.DeserializeObject<object>(responseContent);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur UpdateDocumentAsync: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Change le repository actif
        /// </summary>
        public async Task<bool> SwitchRepositoryAsync(int repositoryId)
        {
            try
            {
                var response = await _httpClient.PostAsync($"{_baseUrl}/api/v1/documents/switch-repository/{repositoryId}", null);
                return response.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur SwitchRepositoryAsync: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// R√©cup√®re les diagnostics de l'architecture adaptative
        /// </summary>
        public async Task<object?> GetArchitectureDiagnosticsAsync()
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/diagnostics");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<object>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetArchitectureDiagnosticsAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// R√©cup√®re les statistiques d'environnement
        /// </summary>
        public async Task<object?> GetEnvironmentStatsAsync()
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/stats/environment");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<object>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetEnvironmentStatsAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Health check sp√©cifique √† l'architecture adaptative
        /// </summary>
        public async Task<object?> GetDocumentsHealthAsync()
        {
            try
            {
                var response = await _httpClient.GetAsync($"{_baseUrl}/api/v1/documents/health");
                response.EnsureSuccessStatusCode();

                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<object>(content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur GetDocumentsHealthAsync: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// R√©cup√®re la configuration compl√®te d'un repository incluant la racine des documents
        /// </summary>
        public async Task<string> GetRepositoryDocumentsRootAsync(string repositoryId)
        {
            try
            {
                // üîê CORRECTION: Utiliser directement l'authentification de TextLabApiService pour l'endpoint admin
                var request = await CreateAuthenticatedRequestAsync(HttpMethod.Get, $"/api/v1/admin/repositories/{repositoryId}/config");
                var response = await SendAuthenticatedRequestAsync(request);
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    System.Diagnostics.Debug.WriteLine($"üîç GetRepositoryConfig Response: {content}");
                    
                    var configResponse = JsonConvert.DeserializeObject<dynamic>(content);
                    var rootDocuments = configResponse?.config?.root_documents?.ToString() ?? "documents/";
                    
                    System.Diagnostics.Debug.WriteLine($"‚úÖ Repository {repositoryId}, RootDocuments: '{rootDocuments}' (depuis .textlab.yaml)");
                    return rootDocuments;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine($"‚ùå Erreur r√©cup√©ration config repository: {response.StatusCode}");
                    return "documents/"; // Fallback
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Exception GetRepositoryDocumentsRootAsync: {ex.Message}");
                return "documents/"; // Fallback
            }
        }

        /// <summary>
        /// Construit l'URL GitHub compl√®te en tenant compte de la racine configurable
        /// </summary>
        public async Task<string?> BuildGitHubUrlAsync(Repository repository, string gitPath)
        {
            try
            {
                // R√©cup√©rer la racine des documents depuis la configuration
                var documentsRoot = await GetRepositoryDocumentsRootAsync(repository.Id);
                
                // S'assurer que la racine se termine par /
                if (!documentsRoot.EndsWith("/"))
                {
                    documentsRoot += "/";
                }
                
                // üîß NETTOYER LE GITPATH : √©viter la duplication si gitPath commence d√©j√† par documentsRoot
                var cleanGitPath = gitPath;
                if (!string.IsNullOrEmpty(documentsRoot) && cleanGitPath.StartsWith(documentsRoot))
                {
                    cleanGitPath = cleanGitPath.Substring(documentsRoot.Length);
                    System.Diagnostics.Debug.WriteLine($"üßπ GitPath nettoy√©: '{gitPath}' ‚Üí '{cleanGitPath}' (suppression de '{documentsRoot}')");
                }
                
                // Construire l'URL GitHub compl√®te
                var githubUrl = "";
                
                if (repository.Name.ToLower() == "gaudylab")
                {
                    githubUrl = $"https://github.com/jfgaudy/gaudylab/blob/main/{documentsRoot}{cleanGitPath}";
                }
                else if (repository.Name.ToLower().Contains("pac"))
                {
                    githubUrl = $"https://github.com/jfgaudy/PAC_Repo/blob/main/{documentsRoot}{cleanGitPath}";
                }
                else
                {
                    githubUrl = $"https://github.com/jfgaudy/{repository.Name}/blob/main/{documentsRoot}{cleanGitPath}";
                }
                
                System.Diagnostics.Debug.WriteLine($"üîó URL GitHub construite: {githubUrl}");
                System.Diagnostics.Debug.WriteLine($"üìÅ Racine utilis√©e: {documentsRoot}");
                
                return githubUrl;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå Erreur construction URL GitHub: {ex.Message}");
                return null;
            }
        }

        public void Dispose()
        {
            // HttpClient statique, pas de dispose n√©cessaire
        }
    }
} 